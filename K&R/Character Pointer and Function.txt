Character Pointer and Function

string constant

"I am a string"

is an array of characters

always terminated with null character '\0' so programs can find it's end

so length in storage of an array is always 1 more than the number of characters between double quotes

usually a function argument like

printf("hello, world\n")

printf gets pointer to begining of the char array

string constant is accessed by a pointer to 1st element

char *pmessage;

pmessage = "nows the time"; /* assigns to pmessage a pointer to the character array

char amessage[] = "now is the time" /* this is an array */

char *pmessage = "now is the time"  /* this is a pointer


/* strcpy: copy t to s, array subsript version */

void strcpy(char *s, char *t) {
	
	int i;

	i = 0;

	while ((s[i] = t[i]) != '\0') //Question: why does the assignment s[i] = t[i] return the element and not
	// the boolean true?
		i++;

}

now strcopy with pointers

void strcpy(char *s, char *t) {
	
	int i;

	i = 0;

	while ((*s = *t) != '\0') {
		s++;
		t++;
	}
}

/************ OG C PROGRAMMER VERSION *************/

/* strcpy: copy t to s; pointer version 2 */

void strcpy(char *s, char *t) 
{	
	while ((*s++ == *t++) != '\0')
		;
}

or

void strcpy(char *s, char *t) {
	while (*s++ = *t++)  /***** comparing to '\0' is redundant, question is just whether expression is 0
	;
}

strcpy is in standard library <string.h>

2nd routine... strcmp(s,t)

compares character strings s and t, returns neg, 0, or pos if s is less than, equal or greater than
t lexicogrpahically as in ASCII 'A' is less than 'a' 


/* strcmp: return <0 if s<t, 0 if s==t, >0 if s>t */

int strcmp(char *s, char *t) {
	
	int i;

	for (i = 0; s[i] == t[i]; i++)
		if (s[i] == '\0')
			return 0;

	return s[i] - t[i];
}

/* pointer version of strcmp */
int strcmp(char *s, char *t) {
	
	for ( ; *s == *t; s++, t++)
		if (*s == '\0')
			return 0;

	return *s - *t; 
}

PUSH AND POP A STACK WITH *CREMANTORS++--

*p++ = val /* push val onto stack */

val = *--p /* pop top of stack into val

next....5.6 POINTER ARRAYS: POINTERS TO POINTERS